@page "/timer"
@using TimerApp.Data
@using TimerApp.Services
@inherits OwningComponentBase<HistoryService>

<div class="text-center">
    <h1>Timer</h1>
    <p class="timer-status">Countdown @h : @m : @s</p>
    <div class="timer-progress-bar">
        <div class="timer-progress-bar-line" style="width: @widthProgress"></div>
    </div>
    <div class="d-flex gap-10 justify-content-center">
        <div class="timer-item">
            <p class="mb-0">Hour</p>
            <input class="timer-input" type="number" @bind="hIp" />
        </div>
        <div class="timer-item">
            <p class="mb-0">Minute</p>
            <input class="timer-input" type="number" @bind="mIp" />
        </div>
        <div class="timer-item">
            <p class="mb-0">Second</p>
            <input class="timer-input" type="number" @bind="sIp" />
        </div>
    </div>
    <p class="mt-4 text-danger">@error</p>
    <button class="btn btn-primary mt-2 timer-btn" @onclick="Start">Start</button>
    @if (isContinue)
    {
        <button class="btn btn-primary mt-2 timer-btn" @onclick="Continue">Continue</button>
    }
    else
    {
        <button class="btn btn-primary mt-2 timer-btn" @onclick="Pause">Pause</button>
    }
    <button class="btn btn-primary mt-2 timer-btn" @onclick="Reset">Reset</button>
    <table class="table">
        <thead>
            <tr>
                <th>Start</th>
                <th>End</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var history in hs)
            {
                <tr>
                    <td>@history.start_time</td>
                    <td>@history.end_time</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public System.Collections.Generic.IList<History>? hs;
    System.Timers.Timer? timer;
    public DateTime startTime;
    public bool isContinue = false;
    public string widthProgress = "0%";
    public int currentWidthProgress;
    public TimeSpan savedTotalDistance;
    public string? error;
    public int hIp, mIp, sIp;
    public bool isFirst = true;
    public int h, m, s;
    public DateTime time;
    TimeSpan distance;
    TimeSpan savedDistancePause;
    public void Start()
    {
        if (
        (hIp > 24 || mIp > 60 || sIp > 60)
        || (hIp < 0 || mIp < 0 || sIp < 0)
        || (hIp == 0 && mIp == 0 && sIp == 0)
        )
        {
            error = "Entired correctly format timer";
            return;
        }
        error = "";
        DateTime dateNow = DateTime.Now;
        time = new DateTime(
        dateNow.Year,
        dateNow.Month,
        dateNow.Day,
        dateNow.Hour + hIp,
        dateNow.Minute + mIp,
        dateNow.Second + sIp + 1
        );
        savedTotalDistance = time - dateNow;
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += CountDown;
        timer.Start();
        CalcTimer();
        startTime = DateTime.Now;
    }
    private void CountDown(Object? source, System.Timers.ElapsedEventArgs e)
    {
        if (isFirst || h > 0 || m > 0 || s > 0)
        {
            isFirst = false;
            CalcTimer();
        }
        else
        {
            Reset();
        }
        InvokeAsync(StateHasChanged);
    }
    private void CalcTimer()
    {
        distance = time - DateTime.Now;
        h = distance.Hours;
        m = distance.Minutes;
        s = distance.Seconds;
        if (currentWidthProgress < 300)
        {
            if (isFirst) return;
            double newTotal = savedTotalDistance.TotalSeconds;
            double newDis = distance.TotalSeconds;
            widthProgress = Math.Round(((newTotal - newDis) / newTotal) * 100, 0, MidpointRounding.ToEven) + "%";
        }
    }
    private void Pause()
    {
        if (timer is System.Timers.Timer)
        {
            isContinue = true;
            timer.Enabled = false;
            savedDistancePause = time - DateTime.Now;
        }
    }
    private void Continue()
    {
        if (timer is System.Timers.Timer)
        {
            isContinue = false;
            timer.Enabled = true;
            DateTime dateNow = DateTime.Now;
            time = new DateTime(
            dateNow.Year,
            dateNow.Month,
            dateNow.Day,
            dateNow.Hour + savedDistancePause.Hours,
            dateNow.Minute + savedDistancePause.Minutes,
            dateNow.Second + savedDistancePause.Seconds + 2
            );
        }
    }
    private void Reset()
    {
        if (timer is System.Timers.Timer)
        {
            timer.Enabled = false;
            timer = null;
            h = 0;
            m = 0;
            s = 0;
            isFirst = true;
            time = DateTime.Now;
            currentWidthProgress = 0;
            widthProgress = "0%";
            Service.addHistory(startTime.ToString(), DateTime.Now.ToString());
            hs = Service.displayHistory();
        }
    }
    protected override Task OnInitializedAsync()
    {
        hs = Service.displayHistory();
        return Task.FromResult(hs);
    }
}